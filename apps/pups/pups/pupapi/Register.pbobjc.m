// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Register.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RegisterRoot

@implementation RegisterRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - RegisterRoot_FileDescriptor

static GPBFileDescriptor *RegisterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pupapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RegisterMessage

@implementation RegisterMessage

@dynamic email;
@dynamic firstName;
@dynamic lastName;
@dynamic zipcode;
@dynamic password;

typedef struct RegisterMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *firstName;
  NSString *lastName;
  NSString *zipcode;
  NSString *password;
} RegisterMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = RegisterMessage_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterMessage__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterMessage_FieldNumber_FirstName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterMessage__storage_, firstName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterMessage_FieldNumber_LastName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterMessage__storage_, lastName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zipcode",
        .dataTypeSpecific.className = NULL,
        .number = RegisterMessage_FieldNumber_Zipcode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterMessage__storage_, zipcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = RegisterMessage_FieldNumber_Password,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterMessage__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterMessage class]
                                     rootClass:[RegisterRoot class]
                                          file:RegisterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterResponse

@implementation RegisterResponse

@dynamic success;
@dynamic takenEmail;
@dynamic invalidPassword;
@dynamic invalidFirstName;
@dynamic invalidLastName;
@dynamic invalidZipcode;

typedef struct RegisterResponse__storage_ {
  uint32_t _has_storage_[1];
} RegisterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "takenEmail",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_TakenEmail,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "invalidPassword",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_InvalidPassword,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "invalidFirstName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_InvalidFirstName,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "invalidLastName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_InvalidLastName,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "invalidZipcode",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_InvalidZipcode,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterResponse class]
                                     rootClass:[RegisterRoot class]
                                          file:RegisterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
